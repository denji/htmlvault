% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/htmlvault_encrypt_file.R
\name{htmlvault_encrypt_file}
\alias{htmlvault_encrypt_file}
\title{Encrypt files and embed them in an self decrypting html file}
\usage{
htmlvault_encrypt_file(
  path,
  mime_type = mime::guess_type(path),
  extension = tools::file_ext(path),
  output_path = paste0(path, ".enc.html"),
  key = sodium::random(32L),
  output_template_path = system.file("html-template.html", package = "htmlvault")
)
}
\arguments{
\item{path}{the file you want to encrypt}

\item{mime_type}{optional, the MIME type of your input file.}

\item{extension}{optional, the extension of your input file. E.g. docx or pdf.}

\item{output_path}{optional, the output path}

\item{key}{optional, the encryption key}

\item{output_template_path}{a path to the output template.
The output template needs have the same html form elements (same ids) and the same placeholders as the default template. Everything else can be customized.}
}
\value{
The html code of the resulting file as an invisible character vector.
}
\description{
This function takes a file, encrypts the complete file using \code{\link[sodium:data_encrypt]{sodium::data_encrypt}}
and a given key. It then injects the encrypted content into an html template that
contains the \code{sodium} decryption code compiled to javascript.
The resulting file is fully self contained as it can decrypt itself.
When the user enters the correct key, the user gets asked to download
the decrypted file.
}
\details{
Warning: You are using this at your own risk. Make sure your encryption key is
strong enough. For serious use cases, please also review the code of the functions.
Any feedback is appreciated. This is an early package version.
}
\references{
The package follows the same approach as the node module \href{https://github.com/derhuerst/self-decrypting-html-page}{self-decrypting-html-page}.
The decryption code is based on a number of great node modules.
All licenses are also bundled with each html file.
}
